# Sensitive properties like API keys should be managed securely in production,
# preferably via environment variables or a secrets management system,
# rather than being stored directly in this file in version control.

# Development mode properties - these should be overridden in production
spring.profiles.active=dev

# Server port
server.port=7070

# Spring configuration
spring.main.allow-circular-references=true
spring.main.allow-bean-definition-overriding=true

# Environment Mode
# Valid values: local, staging, production
env.mode=local

# Sandbox Configuration
DAYTONA_API_KEY=
DAYTONA_SERVER_URL=
DAYTONA_TARGET=

# LLM API Keys
OPENROUTER_API_KEY=
OPENAI_API_KEY=${OPENROUTER_API_KEY} # This env var will be used by Spring AI if spring.ai.openai.api-key is not set
# MODEL_TO_USE=openrouter/deepseek/deepseek-chat-v3-0324:free # Replaced by Spring AI's model property

# Database Configuration (Supabase)
SUPABASE_URL=
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
SUPABASE_SCHEMA=public

# JWT Configuration
jwt.secret=

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_SSL=false
spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}

# RabbitMQ Configuration
RABBITMQ_HOST=localhost
RABBITMQ_PORT=5672
spring.rabbitmq.host=${RABBITMQ_HOST}
spring.rabbitmq.port=${RABBITMQ_PORT}
spring.rabbitmq.connection.retry.initial-interval=1000
spring.rabbitmq.connection.retry.max-interval=30000
spring.rabbitmq.connection.retry.multiplier=2.0
spring.rabbitmq.connection.retry.max-attempts=5
spring.application.name=suna-ai-java

# Database Configuration - Supabase (using custom client)
# SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY environment variables are used by SupabaseClient

# LLM Provider Configuration
# Options: google, openai
llm.provider=openai # This might still be used by LlmServiceFactory, but OpenAILlmService will now use Spring AI

# Spring AI OpenAI Configuration
spring.ai.openai.api-key=${OPENAI_API_KEY} # Explicitly set for Spring AI
# spring.ai.openai.chat.options.model=gpt-4o-mini # Default Spring AI model, can be overridden in code or here

# Old OpenAI Configuration (commented out)
# openai.api.key=

# Google AI Configuration
# If not provided, will use GOOGLE_API_KEY environment variable
google.api.key=${GEMINI_API_KEY}

# Context Management
context.token.threshold=120000
context.summary.target.tokens=10000
context.reserve.tokens=5000

# Logging
logging.level.root=INFO
logging.level.com.suna.ai.agentpress=INFO

# Firebase Configuration
FIREBASE_PROJECT_ID=
FIREBASE_PRIVATE_KEY_ID=
FIREBASE_CLIENT_EMAIL=
FIREBASE_CLIENT_ID=
GCP_PROJECT_ID=
GOOGLE_CLOUD_PROJECT=
spring.ai.openai.api-key=

# Search APIs
TAVILY_API_KEY=
RAPID_API_KEY=
FIRECRAWL_API_KEY=
FIRECRAWL_URL=

# Vector Database Configuration
QDRANT_URL=
QDRANT_API_KEY=
QDRANT_COLLECTION_NAME=

# Additional AI API Keys
JINA_API_KEY=
PINECONE_API_KEY=
GEMINI_API_KEY=
ANTHROPIC_API_KEY=
GROQ_API_KEY=
