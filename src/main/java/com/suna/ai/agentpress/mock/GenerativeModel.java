package com.Nubian.ai.agentpress.mock;

import java.util.Iterator;
import java.util.List;
import java.util.Random;

/**
 * Mock implementation of the GenerativeModel class.
 */
public class GenerativeModel {
    private String modelName;
    private Random random = new Random();
    
    /**
     * Create a new GenerativeModel.
     * 
     * @param modelName The name of the model
     */
    public GenerativeModel(String modelName) {
        this.modelName = modelName;
    }
    
    /**
     * Generate content from the model.
     * 
     * @param contentMessages The messages to send to the model
     * @param config The configuration for the generation
     * @return The generated content
     */
    public GenerateContentResponse generateContent(List<Content> contentMessages, GenerateContentConfig config) {
        // Create a mock response
        GenerateContentResponse response = new GenerateContentResponse();
        GenerateContentResponse.Candidate candidate = new GenerateContentResponse.Candidate();
        
        // Create mock content
        Content content = Content.builder()
                .setRole("assistant")
                .addPart(Part.builder()
                        .setText(generateMockText(contentMessages))
                        .build())
                .build();
        
        candidate.setContent(content);
        candidate.setFinishReason("STOP");
        response.addCandidate(candidate);
        
        return response;
    }
    
    /**
     * Generate content from the model as a stream.
     * 
     * @param contentMessages The messages to send to the model
     * @param config The configuration for the generation
     * @return An iterator of generated content responses
     */
    public Iterator<GenerateContentResponse> generateContentStream(List<Content> contentMessages, GenerateContentConfig config) {
        // Create a mock response
        GenerateContentResponse response = generateContent(contentMessages, config);
        
        // Return an iterator with a single response
        return List.of(response).iterator();
    }
    
    /**
     * Generate mock text based on the input messages.
     * 
     * @param contentMessages The input messages
     * @return The generated text
     */
    private String generateMockText(List<Content> contentMessages) {
        // Extract the last user message
        String lastUserMessage = "";
        for (int i = contentMessages.size() - 1; i >= 0; i--) {
            Content content = contentMessages.get(i);
            if ("user".equals(content.getRole()) && !content.getParts().isEmpty()) {
                lastUserMessage = content.getParts().get(0).getText();
                break;
            }
        }
        
        // Generate a mock response based on the last user message
        if (lastUserMessage.toLowerCase().contains("hello") || lastUserMessage.toLowerCase().contains("hi")) {
            return "Hello! How can I help you today?";
        } else if (lastUserMessage.toLowerCase().contains("weather")) {
            return "I'm sorry, I don't have access to real-time weather information. This is a mock response.";
        } else if (lastUserMessage.toLowerCase().contains("java") || lastUserMessage.toLowerCase().contains("spring")) {
            return "Java is a popular programming language, and Spring is a powerful framework for building Java applications. "
                    + "Spring Boot makes it easy to create stand-alone, production-grade Spring-based applications.";
        } else {
            return "I understand your message. This is a mock response from the GenerativeModel. "
                    + "In a real implementation, this would be generated by an actual LLM.";
        }
    }
}
