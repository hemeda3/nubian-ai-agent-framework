package com.Nubian.ai.agentpress.service.impl;

import com.Nubian.ai.config.BillingConfig;
import com.Nubian.ai.agentpress.model.billing.CheckoutSessionRequest;
import com.Nubian.ai.agentpress.model.billing.PortalSessionRequest;
import com.Nubian.ai.agentpress.model.billing.SubscriptionStatus;
import com.Nubian.ai.agentpress.service.BillingService;
import com.Nubian.ai.agentpress.service.DBConnection;
import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.checkout.Session;
import com.stripe.model.billingportal.CustomerSession;
import com.stripe.model.Customer;
import com.stripe.model.Subscription;
import com.stripe.model.SubscriptionCollection;
import com.stripe.model.SubscriptionItem;
import com.stripe.model.SubscriptionSchedule;
import com.stripe.model.SubscriptionSchedulePhase;
import com.stripe.model.UsageRecord;
import com.stripe.param.checkout.SessionCreateParams;
import com.stripe.param.billingportal.CustomerSessionCreateParams;
import com.stripe.param.CustomerCreateParams;
import com.stripe.param.SubscriptionListParams;
import com.stripe.param.UsageRecordCreateParams;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

import java.time.Duration; 
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

/**
 * Real implementation of a Stripe billing service.
 * Integrates with the Stripe Java SDK for customer management, subscriptions,
 * payment processing, webhook handling, and usage reporting.
 */
@Service
@Profile("!dev") // Activate this service in non-development profiles
@Slf4j
public class StripeBillingService implements BillingService {

    private final DBConnection dbConnection;
    private final BillingConfig billingConfig;

    @Value("${stripe.api.key}")
    private String stripeApiKey;

    @Autowired
    public StripeBillingService(DBConnection dbConnection, BillingConfig billingConfig) {
        this.dbConnection = dbConnection;
        this.billingConfig = billingConfig;
        log.info("StripeBillingService initialized (Production Mode)");
    }

    @Override
    public CompletableFuture<Map<String, Object>> checkModelAccess(String userId, String modelName) {
        return this.getAccessibleModels(userId)
                .thenApply(allowedModels -> {
                    String resolvedModel = billingConfig.getCanonicalModelName(modelName);
                    Map<String, Object> result = new HashMap<>();
                    result.put("modelList", allowedModels);

                    if (allowedModels.contains(resolvedModel)) {
                        result.put("allowed", true);
                        result.put("message", "Model access allowed");
                    } else {
                        result.put("allowed", false);
                        result.put("message", "Your current subscription plan does not include access to " +
                                modelName + ". Please upgrade your subscription or choose from your available models: " +
                                String.join(", ", allowedModels));
                    }
                    return result;
                });
    }

    @Override
    public CompletableFuture<Set<String>> getAccessibleModels(String userId) {
        return this.getStripeCustomerId(userId)
                .thenCompose(customerId -> {
                    if (customerId == null) {
                        return CompletableFuture.completedFuture(billingConfig.getModelAccessTiers().get(billingConfig.getStripeFreeTierId()));
                    }
                    return this.getUserSubscription(customerId)
                            .thenApply(subscription -> {
                                String tierId = billingConfig.getStripeFreeTierId();
                                if (subscription != null && subscription.getPrice() != null && subscription.getPrice().getId() != null) {
                                    tierId = subscription.getPrice().getId();
                                }
                                return billingConfig.getModelAccessTiers().getOrDefault(tierId,
                                        billingConfig.getModelAccessTiers().get(billingConfig.getStripeFreeTierId()));
                            });
                });
    }

    @Override
    public CompletableFuture<Map<String, Object>> getModelDetails(String userId) {
        return this.getAccessibleModels(userId)
                .thenCompose(allowedModels -> this.getUserSubscription(userId)
                        .thenApply(subscription -> {
                            String tierName = "free";
                            if (subscription != null && subscription.getPrice() != null && subscription.getPrice().getId() != null) {
                                String priceId = subscription.getPrice().getId();
                                Map<String, Object> tierInfo = billingConfig.getSubscriptionTiers().get(priceId);
                                if (tierInfo != null) {
                                    tierName = (String) tierInfo.get("name");
                                }
                            }

                            Map<String, String> modelAliases = billingConfig.getModelNameAliases();
                            List<Map<String, Object>> modelInfo = allowedModels.stream()
                                    .map(model -> {
                                        String displayName = model;
                                        String shortName = null;
                                        for (Map.Entry<String, String> entry : modelAliases.entrySet()) {
                                            if (entry.getValue().equals(model) && !entry.getKey().equals(model)) {
                                                shortName = entry.getKey();
                                                if (!shortName.contains("/")) {
                                                    displayName = shortName;
                                                }
                                                break;
                                            }
                                        }
                                        Map<String, Object> info = new HashMap<>();
                                        info.put("id", model);
                                        info.put("display_name", displayName);
                                        info.put("short_name", shortName);
                                        return info;
                                    })
                                    .collect(Collectors.toList());

                            Map<String, Object> result = new HashMap<>();
                            result.put("models", modelInfo);
                            result.put("subscription_tier", tierName);
                            result.put("total_models", modelInfo.size());
                            return result;
                        }));
    }

    @Override
    public CompletableFuture<Map<String, Object>> checkBillingStatus(String userId) {
        return this.getStripeCustomerId(userId)
                .thenCompose(customerId -> {
                    if (customerId == null) {
                        return CompletableFuture.completedFuture(createFreeTierStatus(userId));
                    }
                    return this.getUserSubscription(customerId)
                            .thenCompose(subscription -> {
                                if (subscription == null) {
                                    return CompletableFuture.completedFuture(createFreeTierStatus(userId));
                                }
                                return this.calculateMonthlyUsage(userId)
                                        .thenApply(usage -> {
                                            Map<String, Object> result = new HashMap<>();
                                            Map<String, Object> subscriptionInfo = new HashMap<>();
                                            String priceId = subscription.getPrice() != null ? subscription.getPrice().getId() : null;
                                            Map<String, Object> tierInfo = billingConfig.getSubscriptionTiers().getOrDefault(
                                                    priceId, billingConfig.getSubscriptionTiers().get(billingConfig.getStripeFreeTierId()));

                                            subscriptionInfo.put("price_id", priceId);
                                            subscriptionInfo.put("plan_name", tierInfo.get("name"));
                                            subscriptionInfo.put("minutes_limit", tierInfo.get("minutes"));
                                            subscriptionInfo.put("status", subscription.getStatus());
                                            result.put("subscription", subscriptionInfo);

                                            int minutesLimit = (Integer) tierInfo.get("minutes");
                                            if (usage >= minutesLimit) {
                                                result.put("can_run", false);
                                                result.put("message", "Monthly limit of " + minutesLimit +
                                                        " minutes reached. Please upgrade your plan or wait until next month.");
                                            } else {
                                                result.put("can_run", true);
                                                result.put("message", "OK");
                                            }
                                            return result;
                                        });
                            });
                });
    }

    private Map<String, Object> createFreeTierStatus(String userId) {
        Map<String, Object> subscriptionInfo = new HashMap<>();
        String freeTierId = billingConfig.getStripeFreeTierId();
        Map<String, Object> freeTierInfo = billingConfig.getSubscriptionTiers().get(freeTierId);

        subscriptionInfo.put("price_id", freeTierId);
        subscriptionInfo.put("plan_name", freeTierInfo.get("name"));
        subscriptionInfo.put("minutes_limit", freeTierInfo.get("minutes"));
        subscriptionInfo.put("status", "active"); // Free tier is always active
        
        Map<String, Object> result = new HashMap<>();
        result.put("subscription", subscriptionInfo);
        result.put("can_run", true); // Free tier always allows running
        result.put("message", "OK");
        return result;
    }

    @Override
    public CompletableFuture<SubscriptionStatus> getSubscriptionStatus(String userId) {
        return this.getStripeCustomerId(userId)
                .thenCompose(customerId -> {
                    if (customerId == null) {
                        return CompletableFuture.completedFuture(createFreeTierSubscriptionStatus());
                    }
                    return this.getUserSubscription(customerId)
                            .thenCompose(subscription -> {
                                if (subscription == null) {
                                    return CompletableFuture.completedFuture(createFreeTierSubscriptionStatus());
                                }
                                return this.calculateMonthlyUsage(userId)
                                        .thenApply(usageMinutes -> {
                                            SubscriptionStatus status = new SubscriptionStatus();
                                            status.setStatus(subscription.getStatus());
                                            String currentPriceId = subscription.getPrice() != null ? subscription.getPrice().getId() : null;
                                            Map<String, Object> tierInfo = billingConfig.getSubscriptionTiers().getOrDefault(
                                                    currentPriceId,
                                                    Map.of("name", "unknown", "minutes", 0)
                                            );
                                            status.setPlanName((String) tierInfo.get("name"));
                                            status.setPriceId(currentPriceId);
                                            status.setMinutesLimit((Integer) tierInfo.get("minutes"));
                                            status.setCurrentUsage(usageMinutes);

                                            if (subscription.getCurrentPeriodEnd() != null) {
                                                status.setCurrentPeriodEnd(LocalDateTime.ofInstant(Instant.ofEpochSecond(subscription.getCurrentPeriodEnd()), ZoneOffset.UTC));
                                            }
                                            if (subscription.getCancelAtPeriodEnd() != null) {
                                                status.setCancelAtPeriodEnd(subscription.getCancelAtPeriodEnd());
                                            }
                                            if (subscription.getTrialEnd() != null) {
                                                status.setTrialEnd(LocalDateTime.ofInstant(Instant.ofEpochSecond(subscription.getTrialEnd()), ZoneOffset.UTC));
                                            }

                                            if (subscription.getSchedule() != null) {
                                                // TODO: Implement proper handling of SubscriptionSchedule for status
                                                // For now, simplified to avoid complex Stripe API calls
                                                log.warn("Subscription schedule detected but not fully processed for status display.");
                                            }
                                            return status;
                                        });
                            });
                });
    }

    private SubscriptionStatus createFreeTierSubscriptionStatus() {
        String freeTierId = billingConfig.getStripeFreeTierId();
        Map<String, Object> freeTierInfo = billingConfig.getSubscriptionTiers().get(freeTierId);
        SubscriptionStatus status = new SubscriptionStatus();
        status.setStatus("no_subscription");
        status.setPlanName((String) freeTierInfo.get("name"));
        status.setPriceId(freeTierId);
        status.setMinutesLimit((Integer) freeTierInfo.get("minutes"));
        status.setCurrentUsage(0.0);
        return status;
    }

    @Override
    public CompletableFuture<Map<String, Object>> createCheckoutSession(
            CheckoutSessionRequest request, String userId, String email) {
        return CompletableFuture.supplyAsync(() -> {
            Stripe.apiKey = stripeApiKey;
            try {
                String customerId = this.getStripeCustomerId(userId).join();
                if (customerId == null) {
                    customerId = this.createStripeCustomer(userId, email).join();
                }

                SessionCreateParams.LineItem.PriceData.ProductData.Builder productDataBuilder =
                        SessionCreateParams.LineItem.PriceData.ProductData.builder()
                                .setName("Nubian AI Subscription");

                SessionCreateParams.LineItem.PriceData.Builder priceDataBuilder =
                        SessionCreateParams.LineItem.PriceData.builder()
                                .setCurrency("usd")
                                .setUnitAmount(billingConfig.getSubscriptionTiers().get(request.getPriceId()).get("price_cents") != null ?
                                        Long.valueOf((Integer) billingConfig.getSubscriptionTiers().get(request.getPriceId()).get("price_cents")) : 0L)
                                .setProductData(productDataBuilder.build())
                                .setRecurring(SessionCreateParams.LineItem.PriceData.Recurring.builder().setInterval(SessionCreateParams.LineItem.PriceData.Recurring.Interval.MONTH).build());

                SessionCreateParams.LineItem lineItem = SessionCreateParams.LineItem.builder()
                        .setPriceData(priceDataBuilder.build())
                        .setQuantity(1L)
                        .build();

                SessionCreateParams.Builder paramsBuilder = SessionCreateParams.builder()
                        .setMode(SessionCreateParams.Mode.SUBSCRIPTION)
                        .addPaymentMethodType(SessionCreateParams.PaymentMethodType.CARD)
                        .addLineItem(lineItem)
                        .setSuccessUrl(request.getSuccessUrl())
                        .setCancelUrl(request.getCancelUrl())
                        .setCustomer(customerId);

                Session session = Session.create(paramsBuilder.build());

                return Map.of(
                        "session_id", session.getId(),
                        "url", session.getUrl(),
                        "status", "new"
                );
            } catch (StripeException e) {
                log.error("Error creating Stripe Checkout session: {}", e.getMessage(), e);
                throw new RuntimeException("Error creating checkout session: " + e.getMessage(), e);
            }
        });
    }

    @Override
    public CompletableFuture<String> createPortalSession(PortalSessionRequest request, String userId) {
        return CompletableFuture.supplyAsync(() -> {
            Stripe.apiKey = stripeApiKey;
            try {
                String customerId = this.getStripeCustomerId(userId).join();
                if (customerId == null) {
                    throw new RuntimeException("No Stripe customer found for user: " + userId);
                }

                CustomerSessionCreateParams params = CustomerSessionCreateParams.builder()
                        .setCustomer(customerId)
                        .setReturnUrl(request.getReturnUrl())
                        .build();

                CustomerSession customerSession = CustomerSession.create(params);
                return customerSession.getUrl(); 
            } catch (StripeException e) {
                log.error("Error creating Stripe Customer Portal session: {}", e.getMessage(), e);
                throw new RuntimeException("Error creating portal session: " + e.getMessage(), e);
            }
        });
    }

    @Override
    public void recordUsage(String userId, String runId, Instant startTime, Instant endTime, String modelName) {
        Stripe.apiKey = stripeApiKey;
        CompletableFuture.runAsync(() -> { // Use runAsync as it doesn't return a value
            try {
                String customerId = this.getStripeCustomerId(userId).join();
                if (customerId == null) {
                    log.warn("Cannot record usage: No Stripe customer found for user {}", userId);
                    return;
                }

                // Find the subscription item for the metered usage plan
                Subscription subscription = this.getActiveSubscriptionForCustomer(customerId).join();
                if (subscription == null) {
                    log.warn("Cannot record usage: No active subscription found for customer {}", customerId);
                    return;
                }

                SubscriptionItem usageSubscriptionItem = null;
                for (SubscriptionItem item : subscription.getItems().getData()) {
                    if (item.getPrice().getId().equals(billingConfig.getStripeUsagePriceId())) {
                        usageSubscriptionItem = item;
                        break;
                    }
                }

                if (usageSubscriptionItem == null) {
                    log.warn("Cannot record usage: No usage-based subscription item found for customer {}", customerId);
                    return;
                }

                long durationSeconds = Duration.between(startTime, endTime).getSeconds();
                double usageMinutes = (double) durationSeconds / 60.0;

                UsageRecordCreateParams params = UsageRecordCreateParams.builder()
                        .setQuantity((long) Math.ceil(usageMinutes)) // Report usage in whole minutes
                        .setTimestamp(startTime.getEpochSecond())
                        .setAction(UsageRecordCreateParams.Action.INCREMENT)
                        .build();

                UsageRecord.createOnSubscriptionItem(usageSubscriptionItem.getId(), params);
                log.info("Recorded {} minutes of usage for user {} (run {}) on model {}", usageMinutes, userId, runId, modelName);

                // Also persist to DB for monthly usage calculation (if not directly from Stripe)
                // Assuming a table 'usage_records' with columns: user_id, run_id, model_name, minutes, created_at
                String sql = "INSERT INTO usage_records (user_id, run_id, model_name, minutes, created_at) VALUES (?, ?, ?, ?, ?)";
                dbConnection.update(sql, userId, runId, modelName, usageMinutes, LocalDateTime.now());

            } catch (StripeException e) {
                log.error("Error recording Stripe usage for user {}: {}", userId, e.getMessage(), e);
            } catch (Exception e) {
                log.error("Unexpected error recording usage for user {}: {}", userId, e.getMessage(), e);
            }
        });
    }

    /**
     * Get the Stripe customer ID for a user.
     * 
     * @param userId The user ID
     * @return A CompletableFuture that completes with the Stripe customer ID, or null if not found
     */
    private CompletableFuture<String> getStripeCustomerId(String userId) {
        String sql = "SELECT stripe_customer_id FROM accounts WHERE id = ?";
        return dbConnection.queryForList(sql, userId)
                .thenApply(results -> {
                    if (results.isEmpty()) {
                        return null;
                    }
                    return (String) results.get(0).get("stripe_customer_id");
                });
    }

    /**
     * Create a new Stripe customer for a user.
     * 
     * @param userId The user ID
     * @param email The user's email
     * @return A CompletableFuture that completes with the new Stripe customer ID
     */
    private CompletableFuture<String> createStripeCustomer(String userId, String email) {
        return CompletableFuture.supplyAsync(() -> {
            Stripe.apiKey = stripeApiKey;
            try {
                CustomerCreateParams params = CustomerCreateParams.builder()
                        .setEmail(email)
                        .putMetadata("userId", userId)
                        .build();
                
                Customer customer = Customer.create(params);
                String customerId = customer.getId();
                
                // Update the user's account with the Stripe customer ID
                String sql = "UPDATE accounts SET stripe_customer_id = ? WHERE id = ?";
                dbConnection.update(sql, customerId, userId);
                
                log.info("Created Stripe customer {} for user {}", customerId, userId);
                return customerId;
            } catch (StripeException e) {
                log.error("Error creating Stripe customer for user {}: {}", userId, e.getMessage(), e);
                throw new RuntimeException("Error creating Stripe customer: " + e.getMessage(), e);
            }
        });
    }

    /**
     * Get the user's subscription.
     * 
     * @param userId The user ID
     * @return A CompletableFuture that completes with the user's subscription, or null if not found
     */
    private CompletableFuture<Subscription> getUserSubscription(String userId) {
        return this.getStripeCustomerId(userId)
                .thenCompose(customerId -> {
                    if (customerId == null) {
                        return CompletableFuture.completedFuture(null);
                    }
                    return this.getActiveSubscriptionForCustomer(customerId);
                });
    }

    /**
     * Get the active subscription for a Stripe customer.
     * 
     * @param customerId The Stripe customer ID
     * @return A CompletableFuture that completes with the active subscription, or null if not found
     */
    private CompletableFuture<Subscription> getActiveSubscriptionForCustomer(String customerId) {
        return CompletableFuture.supplyAsync(() -> {
            Stripe.apiKey = stripeApiKey;
            try {
                SubscriptionListParams params = SubscriptionListParams.builder()
                        .setCustomer(customerId)
                        .setStatus(SubscriptionListParams.Status.ACTIVE)
                        .setLimit(1L)
                        .build();
                
                SubscriptionCollection subscriptions = Subscription.list(params);
                
                if (subscriptions.getData().isEmpty()) {
                    return null;
                }
                
                return subscriptions.getData().get(0);
            } catch (StripeException e) {
                log.error("Error fetching Stripe subscriptions for customer {}: {}", customerId, e.getMessage(), e);
                throw new RuntimeException("Error fetching subscriptions: " + e.getMessage(), e);
            }
        });
    }

    /**
     * Calculate the user's monthly usage.
     * 
     * @param userId The user ID
     * @return A CompletableFuture that completes with the user's monthly usage in minutes
     */
    private CompletableFuture<Double> calculateMonthlyUsage(String userId) {
        // Calculate usage from the start of the current billing period
        LocalDateTime startOfMonth = LocalDateTime.now().withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0).withNano(0);
        
        String sql = "SELECT SUM(minutes) as total_minutes FROM usage_records WHERE user_id = ? AND created_at >= ?";
        return dbConnection.queryForList(sql, userId, startOfMonth)
                .thenApply(results -> {
                    if (results.isEmpty() || results.get(0).get("total_minutes") == null) {
                        return 0.0;
                    }
                    return ((Number) results.get(0).get("total_minutes")).doubleValue();
                });
    }
}
